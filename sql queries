
/*
Diego Sanabria
first project.

*/
/*
Query 1- query used for first insight.
Select Country and city where most amount of money was generated.
*/
select country, city.city, sum(amount) as total_amount
from country
join city
on country.country_id = city.country_id
join address
on city.city_id = address.city_id
join customer
on address.address_id = customer.address_id
join payment 
on customer.customer_id = payment.customer_id
group by 1,2
order by 3 desc

/*
Query 2- query used for second insight. 
Classify Countries payments under quartile, quantile and percentile columns, please select the top 7.
*/


select  country,
NTILE(4) over (partition by country order by total_amount) as payment_quartile,
NTILE(5) over (partition by country order by total_amount) as payment_quintile,
NTILE(100) over (partition by country order by total_amount) as payment_percentile
from
(select country, city.city, sum(amount) as total_amount
from country
join city
on country.country_id = city.country_id
join address
on city.city_id = address.city_id
join customer
on address.address_id = customer.address_id
join payment 
on customer.customer_id = payment.customer_id
group by 1,2
order by 3 desc) table1
order by total_amount desc
limit 7



/*
Query 3- query used for third insight. 
Select the films with the highst rentals
*/

select film.title,  count(rental_id) rental_counter,rental_rate
from film
join inventory
on film.film_id = inventory.film_id
join rental
on inventory.inventory_id = rental.inventory_id
group by title,rental_rate
order by rental_counter desc

/*
Query 4- query used for fourth insight.
organize the list to see  the most pay rental movies and the categories that they belong to.
*/


select category.name film_category,film.title, sum(amount) rental_amount
from film
join film_category
on film.film_id = film_category.film_id
join category
on film_category.category_id = category.category_id
join inventory
on film.film_id = inventory.film_id
join rental
on inventory.inventory_id= rental.inventory_id
join payment
on rental.rental_id =payment.rental_id
group by 1,2
order by 3 desc;


===================================================================end project version 2021-09-27=============================================================




/*
5)  Which one is The best rented movie per category? 
*/

select t2.film_category, t3.film_title,  t2.max_amount
FROM  
  (SELECT film_category, MAX(total_amount) max_amount
  FROM(
     select category.name film_category,film.title film_title, sum(amount) total_amount
     from film
     join film_category
     on film.film_id = film_category.film_id
     join category
     on film_category.category_id = category.category_id
     join inventory
     on film.film_id = inventory.film_id
     join rental
     on inventory.inventory_id= rental.inventory_id
     join payment
     on rental.rental_id =payment.rental_id
     group by 1,2
     order by 3 desc) t1
     GROUP BY 1) t2
JOIN
(



 select category.name film_category,film.title film_title, sum(amount) total_amount
   from film
   join film_category
   on film.film_id = film_category.film_id
   join category
   on film_category.category_id = category.category_id
   join inventory
   on film.film_id = inventory.film_id
   join rental
   on inventory.inventory_id= rental.inventory_id
   join payment
   on rental.rental_id =payment.rental_id
   group by 1,2
   order by 3 desc) t3
   
   ON t2.film_category = t3.film_category and t2.max_amount = t3.total_amount
 














================================================================end of project one===============================
/*
antigua query 2.

*/

select category.name, count(film.film_id) as Total_movies
from category
join film_category
on category.category_id = film_category.category_id
join film
on film_category.film_id = film.film_id
group by category.name
order by total_movies desc;




/*
1).  Provide a table that provides the region for each sales_rep along with their associated accounts. This time only for the Midwest region.
Your final table should include three columns: the region name, the sales rep name, and the account name.
Sort the accounts alphabetically (A-Z) according to account name.
*/

SELECT region.name as regionName, sales_reps.name as NombreDelVendedor, accounts.name as nombreDeCuenta
FROM region
join sales_reps
on region.id= sales_reps.region_id
join accounts
ON sales_reps.id=accounts.sales_rep_id
where region.name ='West'
order by accounts.name asc;

/*
2). Provide a table that provides the region for each sales_rep along with their associated accounts.
This time only for accounts where the sales rep has a first name starting with S and in the Midwest region.
Your final table should include three columns: the region name, the sales rep name, and the account name. 
Sort the accounts alphabetically (A-Z) according to account name.
*/


SELECT region.name as regionName, sales_reps.name as NombreDelVendedor, accounts.name as nombreDeCuenta
FROM region
join sales_reps
on region.id= sales_reps.region_id
join accounts
ON sales_reps.id=accounts.sales_rep_id
where region.name ='Midwest' AND sales_reps.name like 'S%'
order by accounts.name  asc;



/*
3). 
*/
SELECT region.name as regionName, sales_reps.name as NombreDelVendedor, accounts.name as nombreDeCuenta
FROM region
join sales_reps
on region.id= sales_reps.region_id
join accounts
ON sales_reps.id=accounts.sales_rep_id
where region.name ='Midwest' AND sales_reps.name like '% K%'
order by accounts.name  asc;

/*
4). 
*/
SELECT r.name  region, a.name account, o.total_amt_usd/(o.total+0.01) as unitPrecio
FROM region r
JOIN sales_reps s
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
join orders o
ON o.account_id = a.id
where o.standard_qty>100;

/*
5). 
*/

SELECT r.name REGION , a.name account, o.total_amt_usd/(o.total+0.01) as unitPrecio
FROM region r
JOIN sales_reps s
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
join orders o
ON o.account_id = a.id
where o.standard_qty>100 and o.poster_qty >50
order by unitPrecio;

/*
6). 
*/

SELECT r.name REGION , a.name account, o.total_amt_usd/(o.total+0.01) as unitPrecio
FROM region r
JOIN sales_reps s
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
join orders o
ON o.account_id = a.id
where o.standard_qty>100 and o.poster_qty >50
order by unitPrecio DESC;

/*
7). 
*/


SELECT distinct  a.name, w.channel
from  accounts a
join web_events w
ON a.id  =  w.account_id
where a.id= '1001';

/*
8). 
*/
SELECT orders.occurred_at, accounts.name, orders.total,  orders.total_amt_usd

from accounts
join orders
on accounts.id= orders.account_id
where orders.occurred_at between'01-01-2015' and '01-01-2016'

 
